generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  name            String?
  email           String          @unique
  emailVerified   DateTime?
  image           String?
  role            Role            @default(USER)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  accounts        Account[]
  Authenticator   Authenticator[]
  clientSchedules Schedule[]      @relation("ClientSchedules")
  sessions        Session[]
}

model Schedule {
  id          String            @id @default(uuid())
  clientId    String
  date        DateTime
  status      Status            @default(PENDENTE)
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  client      User              @relation("ClientSchedules", fields: [clientId], references: [id], onDelete: Cascade)
  services    ScheduleService[]
}

model Service {
  id          String            @id @default(uuid())
  title       String
  description String
  price       Int
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  schedules   ScheduleService[]
}

model ScheduleService {
  id         String   @id @default(uuid())
  scheduleId String
  serviceId  String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, serviceId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Status {
  CONFIRMADO
  FINALIZADO
  CANCELADO
  PENDENTE
}

enum Role {
  USER
  ADMIN
}
